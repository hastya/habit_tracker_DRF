version: '3'

services:

  db:
    image: postgres
    container_name: postgres_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - pg_data:/var/lib/postgresql/data/pgdata
    ports:
      - '5432:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis
    container_name: redis_app
    command: redis-server --save 20 1 --loglevel warning
    ports:
      - "6379:6379"
    volumes:
      - ./data/cache:/data

  app:
    build: .
    container_name: app
#    command: python manage.py migrate && python manage.py runserver 0.0.0.0:8000
    command: >
      bash -c "python manage.py makemigrations
      && python manage.py migrate
      && python manage.py runserver 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    ports:
      - "8001:8000"
    volumes:
      - .:/app
    tty: true


#  celery:
#    build: .
#    tty: true
#    command: celery -A config worker -l INFO
#    env_file:
#      - .env
#    depends_on:
#      - redis
#      - app
#
#
#  celery_beat:
#    build: .
#    tty: true
#    command: celery -A config beat -l INFO -S django
#    depends_on:
#      - redis
#      - app


  celery:
    build: .
    command: >
      bash -c "celery -A config worker --beat --loglevel=info"
    volumes:
      - .:/app # WORKDIR из Dockerfile
    depends_on:
      - app
      - redis


volumes:
  pg_data:
